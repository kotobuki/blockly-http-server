{"category":"HTTP_Server","color":"#333333","blocks":["__HTTP_Server_start","__HTTP_Server_get_ip_address","__HTTP_Server_session"],"jscode":"// Block __HTTP_Server_start\nvar __HTTP_Server_start_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"HTTP server start\"\n        }\n    ],\n    \"colour\": \"#333333\"\n};\n\nwindow['Blockly'].Blocks['__HTTP_Server_start'] = {\n    init: function() {\n        this.jsonInit(__HTTP_Server_start_json);\n    }\n};\n\nwindow['Blockly'].Python['__HTTP_Server_start'] = function(block) {\n        return `import socket\nimport wifiCfg\n\nhttp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nhttp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\nhttp_server_socket.bind((\"\", 80))\nhttp_server_socket.listen(1)` + \"\\n\";\n};\n\n// Block __HTTP_Server_get_ip_address\nvar __HTTP_Server_get_ip_address_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"Get IP address\"\n        }\n    ],\n    \"colour\": \"#333333\"\n};\n\nwindow['Blockly'].Blocks['__HTTP_Server_get_ip_address'] = {\n    init: function() {\n        this.jsonInit(__HTTP_Server_get_ip_address_json);\n    }\n};\n\nwindow['Blockly'].Python['__HTTP_Server_get_ip_address'] = function(block) {\n        return [`str(wifiCfg.wlan_sta.ifconfig()[0])`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __HTTP_Server_session\nvar __HTTP_Server_session_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"Session\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"values\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"values\"\n        }\n    ],\n    \"colour\": \"#333333\"\n};\n\nwindow['Blockly'].Blocks['__HTTP_Server_session'] = {\n    init: function() {\n        this.jsonInit(__HTTP_Server_session_json);\n    }\n};\n\nwindow['Blockly'].Python['__HTTP_Server_session'] = function(block) {\n    var values = Blockly.Python.valueToCode(block, 'values', Blockly.Python.ORDER_NONE);\n    return `try:\n  conn, addr = http_server_socket.accept()\n  request = str(conn.recv(1024))\n  conn.send(\"HTTP/1.1 200 OK\\\\n\")\n  conn.send(\"Content-Type: text/plain\\\\n\")\n  conn.send(\"Connection: close\\\\n\\\\n\")\n  conn.sendall(\",\".join(${values}) + \"\\\\n\")\n  conn.close()\nexcept OSError:\n  conn.close()` + \"\\n\";\n};\n\n","code":{"start":["window['Blockly'].Python['__HTTP_Server_start'] = function(block) {\n        return `import socket\nimport wifiCfg\n\nhttp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nhttp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\nhttp_server_socket.bind((\"\", 80))\nhttp_server_socket.listen(1)` + \"\\n\";\n};\n\n","import socket\nimport wifiCfg\n\nhttp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nhttp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\nhttp_server_socket.bind((\"\", 80))\nhttp_server_socket.listen(1)"],"get_ip_address":["window['Blockly'].Python['__HTTP_Server_get_ip_address'] = function(block) {\n        return [`str(wifiCfg.wlan_sta.ifconfig()[0])`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","str(wifiCfg.wlan_sta.ifconfig()[0])"],"session":["window['Blockly'].Python['__HTTP_Server_session'] = function(block) {\n    var values = Blockly.Python.valueToCode(block, 'values', Blockly.Python.ORDER_NONE);\n    return `try:\n  conn, addr = http_server_socket.accept()\n  request = str(conn.recv(1024))\n  conn.send(\"HTTP/1.1 200 OK\\\\n\")\n  conn.send(\"Content-Type: text/plain\\\\n\")\n  conn.send(\"Connection: close\\\\n\\\\n\")\n  conn.sendall(\",\".join(${values}) + \"\\\\n\")\n  conn.close()\nexcept OSError:\n  conn.close()` + \"\\n\";\n};\n\n","try:\n  conn, addr = http_server_socket.accept()\n  request = str(conn.recv(1024))\n  conn.send(\"HTTP/1.1 200 OK\\\\n\")\n  conn.send(\"Content-Type: text/plain\\\\n\")\n  conn.send(\"Connection: close\\\\n\\\\n\")\n  conn.sendall(\",\".join(${values}) + \"\\\\n\")\n  conn.close()\nexcept OSError:\n  conn.close()"]}}